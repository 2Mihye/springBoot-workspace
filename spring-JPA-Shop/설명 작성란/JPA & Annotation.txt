*어노테이션(Annotation = @)
	사전적 의미 : 주석
		JDK5부터 등장했으며 '데이터를 위한 데이터'라는 의미의 '메타 데이터'라고 불림.
		클래스나 메서드, 변수 등을 선언할 때 @붙여서 사용.
		
*JPA
	자바에서 관계형 데이터베이스와 상호작용을 위해 기능을 따로 작성하지 않고 축소시켜 사용하는 기술.
	장점 :
		1. 특정 DB에 지정되지 않음.
			예를 들어 오라클로 DB를 지정했으나, 추후 갑작스럽게 Maria DB로 바꾸면 DB마다 쿼리문이 달라서 수정에 들어가야하지만 JPA에서 추상화한 데이터 접근 계층을 제공
	  		하여 설정 파일(application.properties)에 어떤 DB를 사용하는지 알려주면 얼마든지 DB를 변경할 수 있다. 
	  	2. 객체지향적 프로그래밍
	  		JPA DB 설계 중심으로 객체지향적으로 설계가 가능
	  	3. 생산성 향상
	  		DB 테이블에 새로운 컬럼이 추가되었을 경우에 해당 테이블에 컬럼을 사용하는 DTO 클래스의 필드를 모두 변경해야 했음.
	  
	단점 :
		1. 복잡한 쿼리를 처리하는 데 어려움이 있음.
		2. 학습시간
			세부적으로 미세하게 메모리 시간이 더 소요됨.
			
* Repository : 
 	Spring Data JPA에서 제공하는 인터페이스
 	DB에서 User 엔터티에 접근하는 데 사용.
 	기본적인 CRUD 작업을 수행할 수 있는 메서드를 제공.
 	mybatis에서는 ~Mapper가 수행했었고, ~Mapper.xml에서 id값을 넣어 사용했음.
 	
 	예를들어
 		조회 : 전체조회(findAll) 혹은 아이디 하나만 조회(findById & findOne)
 		저장 : save
 		삭제 : deleteById
		
		findById : 일반적으로 Primary key에 해당하는 엔터티를 찾아서 반환하고, Optional에서 Optional.empty() = 빈값으로 반환처리를 할 수 있다.
				   JPA 2.0 이후 출시된 findOne보다 최신버전
		findOne : 조건에 해당하는 엔터티 중 첫 번째 엔터티만 반환하고, 조건에 해당하는 엔터티가 없으면 null을 반환.
 		

* Controller와 Service의 역할차이
	Service : 앞서 진행했던 DB를 가져오는 구문을 상호작용(insert, select, update, delete)하도록 처리하는 역할
 
	Controller : HTML 요청을 처리하고 사용자를 위한 DB를 서비스를 통해 전달하고, 서비스에서 전달받은 결과를 View에게 전달.

	Optional : 제품의 존재 여부를 체크할 수 있도록 해주는 객체
	
	
*Path : 개발자들이 개발하기 위해 URL 대신에 사용하는 위치 경로
	   URL보다 상위개념
	   
	  
*Optional<Products> product = productService.getProductByID(id);
	Optional 안에는 productService.getProductByID(id) 로 id 값을 가져와서 id에 해당하는 제품을 가져오는데, 만약 id에 해당하는 제품이 존재하지 않으면
	비어있게 된다.
	만약 Optional이 비어있게 된다면 에러가 발생할 수 있지만(현재), 추후 비어있을 경우를 대비하여 예외 값을 처리해주는 것이 좋다.
	
	예외값 처리하는 방법 : orElse 를 이용하여 대체값을 제공하거나 페이지 이동 처리를 할 수 있다. (EX/ error.html)
					 이외에 대체값을 생성하는 함수인 orElseGet / 예외를 던지는 orElseThrow 도 어디에서 어떻게 처리할지 제외하고 거의 셋 다 똑같음.
					 
*product.ifPresent(value -> model.addAttribute("product", value));
	ifPresent: Optional 객체 안에 값이 존재할 경우 람다식 표현을 실행하기 위한 메서드.
			   value 값이 존재하면 model에 product 변수명을 사용해서 product 안에 value 값을 추가할 것.
			   추가된 product는 html template 안에서 product를 thymeleaf를 통해 호출해서 value값을 사용할 수 있다.
		 *람다식 : 간결하게 함수를 표현하는 방법으로 간단하게 결과를 표현할 때 사용.
		 		 기본 코드는 (변수값) -> 변수값이 존재하거나 어떤 일이 발생할 경우의 결과를 작성.
	

	
*ORM
	Java와 DataBase에 있는 테이블과 변수들을 매핑해주는 역할을 함.
	
*Lombok
	반복적으로 사용하는 Getter/Setter, 또는 ToString과 같이 반복적인 자바 코드를 작성할 것을 자동으로 축소해서 생성해주는 역할을 주로 해주는 라이브러리.

	@Getter/@Setter :
		public void getID(){}
		public int setID(){} 
		위와 같이 메서드로 작성했던 코드를 @Getter / @Setter 작성으로 코드를 단축시켜주는 역할을 함
	@NotNull :
		해당 변수가 null인지 체크해주는 어노테이션을 제공
	
	@Entity :
		DB에서 테이블에 대응하는 클래스로 @Entity가 붙은 클래스는 JPA에서 관리하는 것이고 한글로 엔티티라고 부름.	
		DB에 item 테이블을 만들고, 이에 대응되는 Item.java를 알아서 만들어서 @Entity 어노테이션이 붙은 클래스가 엔티티가 되는 것.
		
	@Data :
		@ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArg-sConstructor 들을 합친 어노테이션으로 한번에 사용해야 할 때 씀
		+++ @EqualsAndHashCode : 객체가 동등한지 비교하는 데 사용
								 자동으로 equals()와 hashCode() 메서드를 생성해줌.
		+++ @RequiredArg-sConstructor : 필드 중 final이나 @NonNull로 선언된 필드를 대상으로 생성자를 생성해줌.
										이 생성자는 필드를 초기화하는 목적으로 사용됨.
										
	@Controller : 
		어노테이션이 부착된 전통적인 SpringMVC 패턴을 적용한 것으로 view를 생성하고 반환하는 역할을 하기도 함.
		주로 @RequestMapping과 함께 사용하고 HTTP 요청을 처리하고 그 결과를 View로 보냄.
		view 템플릿 안에 들어있는 html과 상호작용 할 수 있도록 제어하는 컨트롤러.
		데이터를 반환할 때는 Model 객체를 통해 View에 데이터를 전달함.
		최종적으로 return하는 것이 html 파일.
	
	@RestController :
		DB를 바로 리턴해서 상호작용하도록 바꿔주는 녀석.
		조금 더 RESTful 웹 서비스를 제공하는 데 특화된 어노테이션으로 @Controller에 @ResponseBody를 함께 사용한 것과 유사하게 동작함.
		@RestController은 이런 기능들을 편리하게 사용할 수 있도록 조금 더 특수하게 만들어진 어노테이션.
		DB에서 받은 내용을 출력하거나 우리가 지정한 값을 화면에 보여줄 수 있도록 하는 컨트롤러.
	
		*	주로 @Controller은 View(html 파일)을 반환하는 데 사용되고,
			@RestController은 @Controller에 @ResponseBody를 추가로 사용하는 것을 대체할 수 있어서 코드가 조금 더 간결해짐.
		
	@ResponseBody :
		메서드가 return해서 반환 해야하는 값을 HTTP 응답에서 html로 전달하는 것이 아닌 java 코드에서 직접 본문으로 전달해서 사용할 수 있는 어노테이션.
		
	@Autowired :
		생성자를 위한 어노테이션으로 스프링은 productRepository 타입의 빈을 찾아서 주입
		
	@Column(name = "칼럼명") :
		해당 어노테이션을 사용하면 테이블을 새로 생성하는 거지만, 이미 있는 것을 확인하는 용이라 칼럼명도 일치해야하고, 칼럼 순서도 일치해야 하지만 굳이 안에 데이터 타입은 맞춰주지 않아도 됨.
		
	 @Table : 
 	테이블 이름을 지정해주는 어노테이션.
 
	@Id :
 	해당 필드가 엔터티의 primaryKey 임을 나타냄.
 	
	@Column : 해당 필드가 데이터베이스 테이블의 컬럼에 매핑되는 것을 확인할 수 있음.
	 	+++ nullable : JPA에 들어있는 공식으로 해당 컬럼이 null값을 허용하는지 여부를 나타냄.
	 	+++ length :  문자열 컬럼의 최대 길이를 지정.
		+++ String으로 시작되는 필드값의 경우 String으로 지정된 이름으로 명시되기 때문에 따로 name을 지정해주지 않아도 되지만,
		 	그 이외의 타입은 name을 설정해주어 Column명을 지정해주는 것이 원칙이다.
	 	
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "product_sequence") :
		JPA에서 엔터티의 기본키 값을 자동으로 생성하는 방법을 지정하는 데 사용하는 어노테이션.
		시퀀스(DB에서 중복되는 값이 아닌 각 레코드가 고유한 숫자번호를 가질 수 있도록 자동으로 값을 생성해줌.)를 사용하여 기본키 값을 생성할 수 있도록 지원함.

	@SeqenceGenerator(name = "product_sequence", seqenceName = "PRODUCT_SEQ", allocationSize = 1) :
		@GeneratedValue와 연결할 이름을 설정해주고, 시퀀스의 이름과 크기를 지정할 수 있음.

	@GeneratedValue(strategy = GenerationType.IDENTITY) :
		DB 자체에서 자동으로 값이 증가할 수 있도록 자동생성이 들어있는 경우 해당 어노테이션 방식을 사용.
		새로운 레코드가 삽입될 때 마다 DB가 자동으로 기본키의 값을 증가시킴.