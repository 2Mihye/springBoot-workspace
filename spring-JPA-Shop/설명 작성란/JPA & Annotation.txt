*어노테이션(Annotation = @)
	사전적 의미 : 주석
		JDK5부터 등장했으며 '데이터를 위한 데이터'라는 의미의 '메타 데이터'라고 불림.
		클래스나 메서드, 변수 등을 선언할 때 @붙여서 사용.
		
*JPA
	자바에서 관계형 데이터베이스와 상호작용을 위해 기능을 따로 작성하지 않고 축소시켜 사용하는 기술.
	장점 :
		1. 특정 DB에 지정되지 않음.
			예를 들어 오라클로 DB를 지정했으나, 추후 갑작스럽게 Maria DB로 바꾸면 DB마다 쿼리문이 달라서 수정에 들어가야하지만 JPA에서 추상화한 데이터 접근 계층을 제공
	  		하여 설정 파일(application.properties)에 어떤 DB를 사용하는지 알려주면 얼마든지 DB를 변경할 수 있다. 
	  	2. 객체지향적 프로그래밍
	  		JPA DB 설계 중심으로 객체지향적으로 설계가 가능
	  	3. 생산성 향상
	  		DB 테이블에 새로운 컬럼이 추가되었을 경우에 해당 테이블에 컬럼을 사용하는 DTO 클래스의 필드를 모두 변경해야 했음.
	  
	단점 :
		1. 복잡한 쿼리를 처리하는 데 어려움이 있음.
		2. 학습시간
			세부적으로 미세하게 메모리 시간이 더 소요됨.
	
*ORM
	Java와 DataBase에 있는 테이블과 변수들을 매핑해주는 역할을 함.
	
*Lombok
	반복적으로 사용하는 Getter/Setter, 또는 ToString과 같이 반복적인 자바 코드를 작성할 것을 자동으로 축소해서 생성해주는 역할을 주로 해주는 라이브러리.

	@Getter/@Setter :
		public void getID(){}
		public int setID(){} 
		위와 같이 메서드로 작성했던 코드를 @Getter / @Setter 작성으로 코드를 단축시켜주는 역할을 함
	@NotNull :
		해당 변수가 null인지 체크해주는 어노테이션을 제공
	
	@Entity :
		DB에서 테이블에 대응하는 클래스로 @Entity가 붙은 클래스는 JPA에서 관리하는 것이고 한글로 엔티티라고 부름.	
		DB에 item 테이블을 만들고, 이에 대응되는 Item.java를 알아서 만들어서 @Entity 어노테이션이 붙은 클래스가 엔티티가 되는 것.		
		
	@Data :
		@ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArg-sConstructor 들을 합친 어노테이션으로 한번에 사용해야 할 때 씀
		+++ @EqualsAndHashCode : 객체가 동등한지 비교하는 데 사용
								 자동으로 equals()와 hashCode() 메서드를 생성해줌.
		+++ @RequiredArg-sConstructor : 필드 중 final이나 @NonNull로 선언된 필드를 대상으로 생성자를 생성해줌.
										이 생성자는 필드를 초기화하는 목적으로 사용됨.